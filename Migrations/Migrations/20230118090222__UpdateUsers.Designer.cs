// <auto-generated />
using System;
using EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230118090222__UpdateUsers")]
    partial class UpdateUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataModel.Models.Entity.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FightId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId")
                        .IsUnique();

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Fight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CloseBet")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAtFight")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Massage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Massages");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DataModel.Models.Identity.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("CashAccount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FightId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("FightId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Bet", b =>
                {
                    b.HasOne("DataModel.Models.Entity.Fight", null)
                        .WithMany("BetBank")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.Identity.UserProfile", "Profile")
                        .WithMany("Bets")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Chat", b =>
                {
                    b.HasOne("DataModel.Models.Entity.Club", null)
                        .WithOne("ChatClub")
                        .HasForeignKey("DataModel.Models.Entity.Chat", "ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.Entity.Post", null)
                        .WithOne("Comments")
                        .HasForeignKey("DataModel.Models.Entity.Chat", "PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.Identity.UserProfile", "Profile")
                        .WithMany("OwnerChats")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Massage", b =>
                {
                    b.HasOne("DataModel.Models.Entity.Chat", null)
                        .WithMany("Massages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Models.Identity.UserProfile", "Profile")
                        .WithMany("Massages")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Post", b =>
                {
                    b.HasOne("DataModel.Models.Identity.UserProfile", "Profile")
                        .WithMany("Posts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataModel.Models.Identity.UserProfile", b =>
                {
                    b.HasOne("DataModel.Models.Entity.Club", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId");

                    b.HasOne("DataModel.Models.Entity.Fight", null)
                        .WithMany("Members")
                        .HasForeignKey("FightId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Chat", b =>
                {
                    b.Navigation("Massages");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Club", b =>
                {
                    b.Navigation("ChatClub")
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Fight", b =>
                {
                    b.Navigation("BetBank");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("DataModel.Models.Entity.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataModel.Models.Identity.UserProfile", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Massages");

                    b.Navigation("OwnerChats");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
